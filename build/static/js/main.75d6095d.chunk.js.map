{"version":3,"sources":["utils/API.js","components/SearchFilter.js","components/ResultSearch.js","components/GenerateEmployees.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchFilter","props","className","htmlFor","onChange","handleInputChange","type","value","search","name","placeholder","id","ResultSearch","onClick","searchArray","results","map","res","first","toLowerCase","includes","key","login","uuid","src","picture","thumbnail","alt","last","email","dob","date","slice","phone","GenerateEmployees","state","order","event","console","log","target","setState","apiCall","API","then","data","catch","error","matchingName","sort","b","a","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0TAGe,EAED,WAEJ,OAAOA,IAAMC,IAAI,2CCmBZC,MAxBf,SAAuBC,GACjB,OACM,oCACA,8BACM,yBAAKC,UAAU,cACf,2BAAOC,QAAQ,UAAf,WACM,2BACAC,SAAUH,EAAMI,kBAChBC,KAAK,OACLJ,UAAU,eACVK,MAAON,EAAMO,OACbC,KAAK,SACLC,YAAY,iCACZC,GAAG,eCoDZC,MAjEf,SAAsBX,GAChB,OACM,oCACA,+BACM,+BACM,4BACM,6BAEA,wBAAIY,QAAW,kBAAMZ,EAAMa,gBAA3B,kBAEA,sCACA,8CACA,iDAMZ,2BAAOZ,UAAU,cAEVD,EAAMc,QAAQC,KAAI,SAACC,GAEd,GAAIA,EAAIR,KAAKS,MAAMC,cAAcC,SAASnB,EAAMO,QAE1C,OACM,oCACA,wBAAIN,UAAU,kBAAkBmB,IAAKJ,EAAIK,MAAMC,MACnC,4BACA,yBAAKC,IAAKP,EAAIQ,QAAQC,UAAWC,IAAI,MAGrC,4BACCV,EAAIR,KAAKS,MADV,IACkBD,EAAIR,KAAKmB,MAG3B,4BACCX,EAAIY,OAGL,4BACCZ,EAAIa,IAAIC,KAAKC,MAAM,EAAG,KAGvB,4BACCf,EAAIgB,gBC6B5CC,E,4MApETC,MAAQ,CACF3B,OAAQ,GACRO,QAAS,GACTqB,MAAO,U,EAIb/B,kBAAoB,SAAAgC,GACdC,QAAQC,IAAI,uBAAyBF,GACrC,IAAM7B,EAAS6B,EAAMG,OAAO/B,KACtBF,EAAQ8B,EAAMG,OAAOjC,MAC3B,EAAKkC,SAAL,eACCjC,EAASD,K,EAQhBmC,QAAU,WACJC,IAAaC,MAAK,SAAA3B,GAAG,OAAI,EAAKwB,SAAS,CAAE1B,QAASE,EAAI4B,KAAK9B,aAAW+B,OAAM,SAAAC,GAAK,OAAIT,QAAQC,IAAIQ,O,EAOvGjC,YAAc,WACR,IAAMkC,EAAe,YAAI,EAAKb,MAAMpB,SAASkC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEzC,KAAKS,MAAQiC,EAAE1C,KAAKS,MAAQ,GAAK,KAE/F,EAAKuB,SAAL,2BAAkB,EAAKN,OAAvB,IAA8BpB,QAASiC,M,kEAdvCI,KAAKV,Y,+BAyBL,OAEM,oCAEA,6BACM,kBAAC,EAAD,CACMrC,kBAAmB+C,KAAK/C,kBACxBG,OAAQ4C,KAAKjB,MAAM3B,SAEzB,6BACA,6BAEA,kBAAC,EAAD,CAAcO,QAASqC,KAAKjB,MAAMpB,QAASiC,aAAcI,KAAKJ,aAAcxC,OAAQ4C,KAAKjB,MAAM3B,OAAQ4B,MAAOgB,KAAKjB,MAAMC,SAK/H,gCACM,wH,GA9DQiB,aCIjBC,MALf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAMuB,c","file":"static/js/main.75d6095d.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nexport default {\n\n      search: function() {\n\n          return axios.get(\"https://randomuser.me/api/?results=100\")\n\n\n      }\n\n\n\n\n  };\n      // EXAMPLE OBJECT FROM API CALL BELOW!!!\n       // EXAMPLE OBJECT FROM API CALL BELOW!!!\n        // EXAMPLE OBJECT FROM API CALL BELOW!!!\n\n//   \"gender\": \"female\",\n// \"name\": {\n// \"title\": \"Mrs\",\n// \"first\": \"Anita\",\n// \"last\": \"Akbari\"\n// },\n// \"location\": {\n// \"street\": {\n// \"number\": 1894,\n// \"name\": \"Thulstrups gate\"\n// },\n// \"city\": \"Mogrenda\",\n// \"state\": \"Hordaland\",\n// \"country\": \"Norway\",\n// \"postcode\": \"3300\",\n// \"coordinates\": {\n// \"latitude\": \"52.0264\",\n// \"longitude\": \"167.1356\"\n// },\n// \"timezone\": {\n// \"offset\": \"+5:45\",\n// \"description\": \"Kathmandu\"\n// }\n// },\n// \"email\": \"anita.akbari@example.com\",\n// \"login\": {\n// \"uuid\": \"107c3d85-45b1-4d39-a5fe-550b42348c83\",\n// \"username\": \"tinyfrog420\",\n// \"password\": \"wwww\",\n// \"salt\": \"uTh2mKxv\",\n// \"md5\": \"9b93a083bf1c20986953de4078c080b5\",\n// \"sha1\": \"d73ec6025abd2c6d59a15b2aea1b373dfea144ec\",\n// \"sha256\": \"4db241eee4817fc8b9e7f623a9c06bfb6d275128dc3036bba5c4cf7d3c3a5765\"\n// },\n// \"dob\": {\n// \"date\": \"1945-02-16T18:31:36.672Z\",\n// \"age\": 75\n// },\n// \"registered\": {\n// \"date\": \"2015-03-05T10:05:22.165Z\",\n// \"age\": 5\n// },\n// \"phone\": \"21257521\",\n// \"cell\": \"99838732\",\n// \"id\": {\n// \"name\": \"FN\",\n// \"value\": \"16024505646\"\n// },\n// \"picture\": {\n// \"large\": \"https://randomuser.me/api/portraits/women/25.jpg\",\n// \"medium\": \"https://randomuser.me/api/portraits/med/women/25.jpg\",\n// \"thumbnail\": \"https://randomuser.me/api/portraits/thumb/women/25.jpg\"\n// },\n// \"nat\": \"NO\"\n// },","import React from \"react\";\n\nfunction SearchFilter (props) {\n      return (\n            <>\n            <form>\n                  <div className=\"form-group\">\n                  <label htmlFor=\"search\">Search:</label>\n                        <input\n                        onChange={props.handleInputChange}\n                        type=\"text\"\n                        className=\"form-control\"\n                        value={props.search}\n                        name=\"search\"\n                        placeholder=\"Search For An Employee By Name\"\n                        id=\"search\"\n                        />\n\n\n\n                  </div>\n            </form>\n            </>\n      )\n}\n\nexport default SearchFilter;","import React from \"react\";\n\nfunction ResultSearch(props) {\n      return (\n            <>\n            <table>\n                  <thead>\n                        <tr>\n                              <th>     \n                              </th>\n                              <th onClick = {() => props.searchArray()}> Employee Name</th>\n                              {/* INPUT ARRAYFILTER FUNCTION ABOVE WHEN COMPLETED IN GENERATEEMPLOYEES FILE*/}\n                              <th> Email</th>\n                              <th> Phone Number </th>\n                              <th> Date of Birth </th>\n\n                        </tr>\n\n                  </thead>\n\n                  <tbody className=\"list-group\">\n                  \n                        {props.results.map((res) => {\n\n                              if (res.name.first.toLowerCase().includes(props.search)) {\n\n                                    return (\n                                          <>\n                                          <tr className=\"list-group-item\" key={res.login.uuid}>\n                                                      <td>\n                                                      <img src={res.picture.thumbnail} alt=\"\"/>\n                                                      </td>\n\n                                                      <td>\n                                                      {res.name.first} {res.name.last}\n                                                      </td>\n\n                                                      <td>\n                                                      {res.email}\n                                                      </td>\n\n                                                      <td>\n                                                      {res.dob.date.slice(0, 10)}\n                                                      </td>\n\n                                                      <td>\n                                                      {res.phone}\n                                                      </td>\n                                                     \n                                                </tr>\n                                          </>\n                                    )\n                              }} \n                              \n                        )}\n\n\n                  </tbody>\n\n\n\n            </table>\n            </>\n      )\n\n\n}\nexport default ResultSearch;\n\n//          FOR REFERENCE IN ABOVE FUNCTIONS\n// / \"email\": \"anita.akbari@example.com\",\n// \"login\": {\n// \"uuid\": \"107c3d85-45b1-4d39-a5fe-550b42348c83\",\n","import React, {Component} from \"react\";\nimport API from \"../utils/API\";\nimport SearchFilter from \"./SearchFilter\";\nimport ResultSearch from \"./ResultSearch\";\n\nclass GenerateEmployees extends Component {\n      // need to create a state variable that can be used to generate results based upon search keyword.\n      state = {\n            search: \"\",\n            results: [],\n            order: \"ascend\"\n            // !!ASK BRIAN IF THIS SHOULD BE \"ASCEND\" OR \"ASCENDING\", can't seem to find appropriate syntax on google\n\n            }\n      handleInputChange = event => {\n            console.log(\"input change occured\" + event)\n            const search = event.target.name;\n            const value = event.target.value;\n            this.setState({\n            [search]: value\n            });\n      };\n\n      componentDidMount() { \n            this.apiCall();}\n      // ask brian if I need anything inside parenthesis of this.apiCall(HERE)//\n\n      apiCall = () => {\n            API.search().then(res => this.setState({ results: res.data.results})).catch(error => console.log(error));\n            \n      }\n\n      \n\n\n      searchArray = () => {\n            const matchingName = [...this.state.results].sort((b, a) => b.name.first > a.name.first ? 1 : -1)\n\n            this.setState({...this.state, results: matchingName})\n\n\n      }\n      \n\n\n\n      // ill need an API call function plus a componentDidMount, a handleinputchange and a function to render array of names based upon this.state.search \n\n      render () {\n            return( \n\n                  <>\n\n                  <div>\n                        <SearchFilter \n                              handleInputChange={this.handleInputChange}\n                              search={this.state.search} />\n\n                        <br></br>\n                        <br></br>\n\n                        <ResultSearch results={this.state.results} matchingName={this.matchingName} search={this.state.search} order={this.state.order} />\n\n\n                  </div>\n\n                  <footer>\n                        <strong>IF NO EMPLOYEES SHOW FROM YOUR SEARCH THEN EMPLOYEE WAS NOT FOUND IN DATABASE.</strong>\n                  </footer>\n                  \n                  </>\n            )\n      }\n}\n\nexport default GenerateEmployees;","import React from 'react';\nimport './App.css';\nimport GenerateEmployees from \"./components/GenerateEmployees\"\n\nfunction App() {\n  return <GenerateEmployees />\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}